{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","chart","useRef","useState","setAccountInfo","isLoading","setIsLoading","errorMessage","setErrorMessage","amount","setAmount","updateTimestamp","setUpdateTimestamp","useEffect","fetch","then","data","json","Promise","resolve","reject","chartData","Items","map","o","x","Date","parseInt","N","y","parseFloat","Amount","sort","a","b","toLocaleTimeString","startAmount","length","diff","Math","abs","toFixed","Chart","current","type","steppedLine","datasets","backgroundColor","borderColor","borderWidth","lineTension","options","legend","display","scales","xAxes","yAxes","beginAtZero","ticks","suggestedMin","className","hidden","style","maxWidth","ref","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad5d33b7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport {useRef, useEffect, useState} from \"react\";\nimport Chart from 'chart.js';\nimport NavBar from \"./component/navbar/navbar\";\n\nconst tempData = {\n    json: () => ({\n        \"Items\": [\n            {\n                \"Amount\": {\n                    \"N\": \"0.20811622\"\n                },\n                \"Date\": {\n                    \"N\": \"1609300275845\"\n                }\n            },\n            {\n                \"Amount\": {\n                    \"N\": \"0.20811622\"\n                },\n                \"Date\": {\n                    \"N\": \"1609301148404\"\n                }\n            },\n            {\n                \"Amount\": {\n                    \"N\": \"0.20811622\"\n                },\n                \"Date\": {\n                    \"N\": \"1609300574978\"\n                }\n            },\n            {\n                \"Amount\": {\n                    \"N\": \"0.20811622\"\n                },\n                \"Date\": {\n                    \"N\": \"1609300875393\"\n                }\n            },\n        ],\n        \"Count\": 6,\n        \"ScannedCount\": 6\n    })\n};\n\nfunction App() {\n    const chart = useRef(null);\n    const [accountInfo, setAccountInfo] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const [amount, setAmount] = useState([\"\", \"\"]);\n    const [updateTimestamp, setUpdateTimestamp] = useState(\"\");\n    useEffect(() => {\n        fetch(`https://ehx8hr7sdb.execute-api.us-west-2.amazonaws.com/fetch`)\n        // new Promise((resolve, reject) => reject()) //resolve(tempData))\n            .then(data => data.json(), () => {\n                setErrorMessage(\"Fetch Data error, please refresh the page.\");\n                return new Promise((resolve, reject) => reject());\n            })\n            .then(data => {\n                const chartData = data.Items.map(o => ({\n                    x: new Date(parseInt(o.Date.N)),\n                    y: parseFloat(o.Amount.N)\n                })).sort((a, b) => b.x - a.x);\n                setAccountInfo(chartData);\n                setIsLoading(true);\n                setUpdateTimestamp(new Date().toLocaleTimeString());\n                const startAmount = chartData[chartData.length - 1].y;\n                const diff = chartData[0].y - startAmount;\n                setAmount([`$${chartData[0].y}`, `${diff >= 0 ? '+$' : '-$'}${Math.abs(diff).toFixed(2)} (${(diff / startAmount).toFixed(2)}%)`, 'Past Month']);\n                const myChart = new Chart(chart.current, {\n                    type: 'line',\n                    steppedLine: 'false',\n                    data: {\n                        datasets: [{\n                            data: chartData,\n                            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                            borderColor: 'rgba(255, 99, 132, 1)',\n                            borderWidth: 1,\n                            lineTension: 0.2\n                        }]\n                    },\n                    options: {\n                        legend: {\n                            display: false\n                        },\n                        scales: {\n                            xAxes: [{\n                                type: 'time',\n                                display: false\n                            }],\n                            yAxes: [{\n                                type: 'linear',\n                                beginAtZero: true,\n                                ticks: {\n                                    suggestedMin: 0\n                                }\n                            }]\n                        }\n                    }\n                });\n            });\n    }, []);\n\n    return (\n        <div className=\"App\">\n            {errorMessage ?\n                <div className=\"alert alert-danger mx-2 my-1\">\n                    {errorMessage}\n                </div> : null\n            }\n            {isLoading ? null : <div className=\"fs-1 fw-bold mx-auto mt-5\">loading</div>}\n            <div className=\"mx-auto p-2\" hidden={!isLoading} style={{maxWidth: \"500px\"}}>\n                <div className=\"fs-2 fw-bold my-2\">Coin Farm</div>\n\n                <div className=\"text-start\">\n                    <section>\n                        <h4>Account Info</h4>\n                        <div className=\"rounded m-2 p-2 bg-white text-dark\">\n                            <div className=\"ms-1\">\n                                <div className=\"fs-1 fw-bold\">{amount[0]}</div>\n                                <div className=\"fs-6\">{amount[1]}<span className=\"text-black-50 ms-1\">{amount[2]}</span>\n                                </div>\n                            </div>\n                            <div className=\"my-1\">\n                                <canvas ref={chart}/>\n                            </div>\n                            <div className=\"my-1\">\n                                <div\n                                    className=\"text-black-50 fs-6 fst-italic\">{`last updated: ${updateTimestamp}`}</div>\n                                {/*<NavBar items={['1D', '1W', '1M']} onChange={() => {}}/>*/}\n                            </div>\n                        </div>\n                    </section>\n                    <section>\n                        <h4>Management</h4>\n                        <div hidden={!isLoading} className=\"rounded m-2 p-2 bg-white text-dark\">\n\n                            <div>\n                                <span className=\"me-1 align-middle\">Buy/Sell:</span>\n                                <button type=\"button\" className=\"btn btn-primary btn-sm mx-1\" disabled>Buy</button>\n                                <button type=\"button\" className=\"btn btn-danger btn-sm\" disabled>Sell</button>\n                            </div>\n                            <div className=\"text-black-50 fs-6 fst-italic mt-3\">More functions will come soon!</div>\n                        </div>\n                    </section>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}